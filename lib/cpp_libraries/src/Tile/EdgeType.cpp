#include "Tile/EdgeType.hpp"

#include <map>
#include <unordered_map>
#include <set>

#include <iostream>

namespace CE
{
	const std::unordered_map<Tile::EdgeType, const std::set<Tile::EdgeType>> typeMappings
	{
		{
			Tile::EdgeType::Grass,
			{
				Tile::EdgeType::Forest,
				Tile::EdgeType::Field,
				Tile::EdgeType::Lake,
				Tile::EdgeType::Square,
				Tile::EdgeType::Buildings,
			}
		},
		{
			Tile::EdgeType::Forest,
			{
				Tile::EdgeType::Grass,
				Tile::EdgeType::Field,
				Tile::EdgeType::Lake,
			}
		},
		{
			Tile::EdgeType::Field,
			{
				Tile::EdgeType::Grass,
				Tile::EdgeType::Forest,
			}
		},
		{
			Tile::EdgeType::Mountain,
			{}
		},
		{
			Tile::EdgeType::Creek,
			{
				Tile::EdgeType::Lake,
			}
		},
		{
			Tile::EdgeType::Stream,
			{
				Tile::EdgeType::Lake,
			}
		},
		{
			Tile::EdgeType::RiverSmall,
			{
				Tile::EdgeType::Lake,
			}
		},
		{
			Tile::EdgeType::RiverLarge,
			{
				Tile::EdgeType::Lake,
			}
		},
		{
			Tile::EdgeType::Lake,
			{
				Tile::EdgeType::Creek,
				Tile::EdgeType::Stream,
				Tile::EdgeType::RiverSmall,
				Tile::EdgeType::RiverLarge,
				Tile::EdgeType::Grass,
				Tile::EdgeType::Forest,
			}
		},
		{
			Tile::EdgeType::RailroadSingle,
			{
				Tile::EdgeType::RailroadSingleBridge,
			}
		},
		{
			Tile::EdgeType::RailroadSingleBridge,
			{
				Tile::EdgeType::RailroadSingle,
			}
		},
		{
			Tile::EdgeType::RailroadDouble,
			{
				Tile::EdgeType::RailroadDoubleBridge,
			}
		},
		{
			Tile::EdgeType::RailroadDoubleBridge,
			{
				Tile::EdgeType::RailroadDouble,
			}
		},
		{
			Tile::EdgeType::PlatformLow,
			{
				Tile::EdgeType::PlatformHighSimple,
				Tile::EdgeType::PlatformHighElaborate,
			}
		},
		{
			Tile::EdgeType::PlatformHighSimple,
			{
				Tile::EdgeType::PlatformLow,
			}
		},
		{
			Tile::EdgeType::PlatformHighElaborate,
			{
				Tile::EdgeType::PlatformLow,
			}
		},
		{
			Tile::EdgeType::DirtTrack,
			{
			}
		},
		{
			Tile::EdgeType::DirtRoadSingle,
			{
				Tile::EdgeType::DirtRoadSingleBridge,
				Tile::EdgeType::RoadSingle,
				Tile::EdgeType::RoadSingleBridge,
				Tile::EdgeType::Square,
			}
		},
		{
			Tile::EdgeType::DirtRoadSingleStreetrunningSingle,
			{
				Tile::EdgeType::DirtRoadSingleBridgeStreetrunningSingle,
				Tile::EdgeType::RoadSingleStreetrunningSingle,
				Tile::EdgeType::RoadSingleBridgeStreetrunningSingle,
				Tile::EdgeType::SquareStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::DirtRoadSingleBridge,
			{
				Tile::EdgeType::DirtRoadSingle,
				Tile::EdgeType::RoadSingle,
				Tile::EdgeType::RoadSingleBridge,
			}
		},
		{
			Tile::EdgeType::DirtRoadSingleBridgeStreetrunningSingle,
			{
				Tile::EdgeType::DirtRoadSingleStreetrunningSingle,
				Tile::EdgeType::RoadSingleStreetrunningSingle,
				Tile::EdgeType::RoadSingleBridgeStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::DirtRoadDouble,
			{
				Tile::EdgeType::DirtRoadDoubleBridge,
				Tile::EdgeType::RoadDouble,
				Tile::EdgeType::RoadDoubleBridge,
				Tile::EdgeType::Square,
			}
		},
		{
			Tile::EdgeType::DirtRoadDoubleStreetrunningSingle,
			{
				Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningSingle,
				Tile::EdgeType::RoadDoubleStreetrunningSingle,
				Tile::EdgeType::RoadDoubleBridgeStreetrunningSingle,
				Tile::EdgeType::SquareStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::DirtRoadDoubleStreetrunningDouble,
			{
				Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningDouble,
				Tile::EdgeType::RoadDoubleStreetrunningDouble,
				Tile::EdgeType::RoadDoubleBridgeStreetrunningDouble,
				Tile::EdgeType::SquareStreetrunningDouble,
			}
		},
		{
			Tile::EdgeType::DirtRoadDoubleBridge,
			{
				Tile::EdgeType::DirtRoadDouble,
				Tile::EdgeType::RoadDouble,
				Tile::EdgeType::RoadDoubleBridge,
			}
		},
		{
			Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningSingle,
			{
				Tile::EdgeType::DirtRoadDoubleStreetrunningSingle,
				Tile::EdgeType::RoadDoubleStreetrunningDouble,
				Tile::EdgeType::RoadDoubleBridgeStreetrunningDouble,
			}
		},
		{
			Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningDouble,
			{
				Tile::EdgeType::DirtRoadDoubleStreetrunningDouble,
				Tile::EdgeType::RoadDoubleStreetrunningDouble,
				Tile::EdgeType::RoadDoubleBridgeStreetrunningDouble,
			}
		},
		{
			Tile::EdgeType::RoadSingle,
			{
				Tile::EdgeType::RoadSingleBridge,
				Tile::EdgeType::DirtRoadSingle,
				Tile::EdgeType::DirtRoadSingleBridge,
				Tile::EdgeType::Square,
			}
		},
		{
			Tile::EdgeType::RoadSingleStreetrunningSingle,
			{
				Tile::EdgeType::RoadSingleBridgeStreetrunningSingle,
				Tile::EdgeType::DirtRoadSingleStreetrunningSingle,
				Tile::EdgeType::DirtRoadSingleBridgeStreetrunningSingle,
				Tile::EdgeType::SquareStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::RoadSingleBridge,
			{
				Tile::EdgeType::RoadSingle,
				Tile::EdgeType::DirtRoadSingle,
				Tile::EdgeType::DirtRoadSingleBridge,
			}
		},
		{
			Tile::EdgeType::RoadSingleBridgeStreetrunningSingle,
			{
				Tile::EdgeType::RoadSingleStreetrunningSingle,
				Tile::EdgeType::DirtRoadSingleStreetrunningSingle,
				Tile::EdgeType::DirtRoadSingleBridgeStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::RoadDouble,
			{
				Tile::EdgeType::RoadDoubleBridge,
				Tile::EdgeType::DirtRoadDouble,
				Tile::EdgeType::DirtRoadDoubleBridge,
				Tile::EdgeType::Square,
			}
		},
		{
			Tile::EdgeType::RoadDoubleBridgeStreetrunningSingle,
			{
				Tile::EdgeType::RoadDoubleStreetrunningSingle,
				Tile::EdgeType::DirtRoadDoubleStreetrunningSingle,
				Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::RoadDoubleBridgeStreetrunningDouble,
			{
				Tile::EdgeType::RoadDoubleStreetrunningDouble,
				Tile::EdgeType::DirtRoadDoubleStreetrunningDouble,
				Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningDouble,
			}
		},
		{
			Tile::EdgeType::RoadDoubleBridge,
			{
				Tile::EdgeType::RoadDouble,
				Tile::EdgeType::DirtRoadDouble,
				Tile::EdgeType::DirtRoadDoubleBridge,
			}
		},
		{
			Tile::EdgeType::RoadDoubleStreetrunningSingle,
			{
				Tile::EdgeType::RoadDoubleBridgeStreetrunningSingle,
				Tile::EdgeType::DirtRoadDoubleStreetrunningSingle,
				Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningSingle,
				Tile::EdgeType::SquareStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::RoadDoubleStreetrunningDouble,
			{
				Tile::EdgeType::RoadDoubleBridgeStreetrunningDouble,
				Tile::EdgeType::DirtRoadDoubleStreetrunningDouble,
				Tile::EdgeType::DirtRoadDoubleBridgeStreetrunningDouble,
				Tile::EdgeType::SquareStreetrunningDouble,
			}
		},
		{
			Tile::EdgeType::Square,
			{
				Tile::EdgeType::RoadSingle,
				Tile::EdgeType::RoadDouble,
				Tile::EdgeType::DirtRoadSingle,
				Tile::EdgeType::DirtRoadDouble,
				Tile::EdgeType::Buildings,
				Tile::EdgeType::Grass,
			}
		},
		{
			Tile::EdgeType::SquareStreetrunningSingle,
			{
				Tile::EdgeType::RoadSingleStreetrunningSingle,
				Tile::EdgeType::RoadDoubleStreetrunningDouble,
				Tile::EdgeType::DirtRoadSingleStreetrunningSingle,
				Tile::EdgeType::DirtRoadDoubleStreetrunningSingle,
			}
		},
		{
			Tile::EdgeType::SquareStreetrunningDouble,
			{
				Tile::EdgeType::RoadDoubleStreetrunningDouble,
				Tile::EdgeType::DirtRoadDoubleStreetrunningDouble,
			}
		},
		{
			Tile::EdgeType::Buildings,
			{
				Tile::EdgeType::Square,
				Tile::EdgeType::Grass,
			}
		},
	};

	bool IsCompatible(Tile::EdgeType type1, Tile::EdgeType type2)
	{
		if (type1 == type2 || type1 == Tile::EdgeType::None || type2 == Tile::EdgeType::None)
		{
			return true;
		}

		if (typeMappings.at(type1).contains(type2))
		{
			return true;
		}

		return false;
	}

	// std::string ToString(Tile::EdgeType type)
	// {
	// 	return "";
	// }

} // namespace CE
